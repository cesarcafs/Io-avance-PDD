# -*- coding: utf-8 -*-
"""io.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a37zR8UlYK4CioAD9Zt1MCxOW1UWAn0B
"""

import sys

def dijkstra(graph, start):
    # Inicializar el diccionario de distancias
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # Inicializar el conjunto de nodos no visitados
    unvisited = set(graph)

    while unvisited:
        # Seleccionar el nodo con la menor distancia actual
        current = min(unvisited, key=lambda node: distances[node])

        # Remover el nodo actual del conjunto de no visitados
        unvisited.remove(current)

        # Actualizar las distancias de los nodos adyacentes
        for neighbor, cost in graph[current].items():
            new_cost = distances[current] + cost
            if new_cost < distances[neighbor]:
                distances[neighbor] = new_cost

    return distances

# Ejemplo de uso
graph = {
    '1': {'2': 7, '3': 6, '4': 5,'5': 6},
    '2': {'6': 9, '7': 4, '8': 6},
    '3': {'6': 5, '7': 7, '8': 4},
    '4': {'6': 9, '7': 10, '8': 8},
    '5': {'6': 7, '7': 10, '8': 11},
    '6': {'9': 3, '10': 2, '11': 1, '12': 3},
    '7': {'9': 4, '10': 1, '11': 4, '12': 6},
    '8': {'9': 2, '10': 3, '11': 6, '12': 5},
    '9': {'13': 12},
    '10': {'13': 16},
    '11': {'13': 15},
    '12': {'13': 14},
    '13': {}
}
start = '1'
distances = dijkstra(graph, start)
print(distances)

"""En este caso, la ruta mÃ¡s corta desde 1 hasta 13 es 3 -> 8 -> 9 -> 13, y el costo optimo es de 24 dolares

"""